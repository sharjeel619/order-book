import { useRouter } from "next/router";
import { Spin, Result, Table, Row, Col } from "antd";
import type { ColumnsType } from "antd/es/table";
import Head from "next/head";
import { useState, useEffect, useCallback, useRef } from "react";
import { getTokenPairAddress } from "@/api/api";
import { Ox_WS_URL } from "@/utils/global";
import styles from "./index.module.scss";
const TOTAL_WS_RESULTS = 20;
const defaultBuyToken = "usdt";

type OrderBookData = {
  price: number;
  quantity: number;
  total: string;
  key?: string;
  quantityClass?: string;
};

let columns: ColumnsType<OrderBookData> = [
  {
    title: `Price `,
    dataIndex: "price",
    key: "price",
  },
  {
    title: `Quantity`,
    dataIndex: "quantity",
    key: "quantity",
  },
  {
    title: `Total`,
    dataIndex: "total",
    key: "total",
  },
];

export default function Market() {
  let ws: WebSocket;
  const router = useRouter();
  const query = router?.query?.slug as string;
  const [bidsTable, setBids] = useState<OrderBookData[]>([]);
  const [asksTable, setAsks] = useState<OrderBookData[]>([]);

  const onWSReceive = useCallback((msg: MessageEvent) => {
    if (!msg?.data) return;
    const parsed = JSON.parse(msg.data);
    if (!parsed?.asks || !parsed?.bids) return;
    const { asks, bids } = parsed;
    let askTotal = 0;
    let bidTotal = 0;

    setBids((oldState) =>
      bids.map((item: string[], index: number) => {
        const [price, quantity] = item;
        bidTotal = index === 0 ? Number(quantity) : bidTotal + Number(quantity);
        return {
          price: Number(price),
          quantity: Number(quantity),
          key: `bid-${index}`,
          total: bidTotal.toFixed(4),
          quantityClass:
            oldState[index]?.quantity > Number(quantity)
              ? "highlight_red"
              : "highlight_green",
        };
      })
    );

    setAsks((oldState) =>
      asks.map((item: string[], index: number) => {
        const [price, quantity] = item;
        askTotal = index === 0 ? Number(quantity) : askTotal + Number(quantity);
        return {
          price: Number(price),
          quantity: Number(quantity),
          key: `bid-${index}`,
          total: askTotal.toFixed(4),
          quantityClass:
            oldState[index]?.quantity > Number(quantity)
              ? "highlight_red"
              : "highlight_green",
        };
      })
    );
  }, []);

  const onWSOpen = useCallback(() => {
    console.log("WS Opened");
  }, []);

  useEffect(() => {
    if (!query) return;
    const [sell, buy] = query.split("-");

    columns = [
      {
        title: `Price (${buy})`,
        dataIndex: "price",
        key: "price",
      },
      {
        title: `Quantity (${sell})`,
        dataIndex: "quantity",
        key: "quantity",
        onCell: (record, index) => {
          return { className: record.quantityClass };
        },
      },
      {
        title: `Total (${sell})`,
        dataIndex: "total",
        key: "total",
      },
    ];

    ws = new WebSocket(
      `${Ox_WS_URL}/${sell.toLowerCase()}${
        buy.toLowerCase() || defaultBuyToken
      }@depth${TOTAL_WS_RESULTS}`
    );

    ws.onopen = onWSOpen;
    ws.onmessage = onWSReceive;

    return () => ws.close();
  }, [query]);

  return (
    <>
      <Head>
        <title>Order Book for {query}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.market_page}>
        <h1>Order Book for {query}</h1>
        <Row justify="center">
          <Col span={10}>
            <Table
              pagination={false}
              columns={columns}
              dataSource={bidsTable}
              title={() => <h2>Bids</h2>}
            />
          </Col>
          <Col span={2}></Col>
          <Col span={10}>
            <Table
              columns={columns}
              dataSource={asksTable}
              pagination={false}
              title={() => <h2>Asks</h2>}
            />
          </Col>
        </Row>
        {/* <Result
          status="error"
          title="Couldn't fetch orderbook"
          subTitle={`Please make sure the token pair has a separator "-" between them`}
        /> */}
      </div>
    </>
  );
}
